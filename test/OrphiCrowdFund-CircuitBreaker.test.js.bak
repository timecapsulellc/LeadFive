import { expect } from "chai";
import { ethers, upgrades } from "hardhat";
import { time } from "@nomicfoundation/hardhat-network-helpers";

/**
 * 🔒 CIRCUIT BREAKER & ORACLE SAFEGUARDS TEST SUITE
 * 
 * This test suite validates:
 * - Circuit breaker functionality for emergency stops
 * - Daily withdrawal limits and tracking
 * - Oracle price deviation safeguards
 * - Emergency pause/unpause mechanisms
 * - Automated safety triggers
 * - Manual override capabilities
 */
describe("🔒 OrphiCrowdFund - Circuit Breaker & Oracle Safeguards", function () {
  let orphiCrowdFund;
  let mockUSDT;
  let mockOracle;
  let owner, adminReserve, emergencyOperator, oracleManager;
  let user1, user2, user3;
  let users = [];

  const PACKAGE_30 = ethers.parseUnits("30", 6);
  const PACKAGE_50 = ethers.parseUnits("50", 6);
  const PACKAGE_100 = ethers.parseUnits("100", 6);
  const PACKAGE_200 = ethers.parseUnits("200", 6);

  const PackageTier = {
    PACKAGE_30: 1,
    PACKAGE_50: 2,
    PACKAGE_100: 3,
    PACKAGE_200: 4
  };

  beforeEach(async function () {
    [owner, adminReserve, emergencyOperator, oracleManager, user1, user2, user3, ...users] = await ethers.getSigners();

    // Deploy Mock USDT
    const MockUSDT = await ethers.getContractFactory("MockUSDT");
    mockUSDT = await MockUSDT.deploy();
    await mockUSDT.waitForDeployment();

    // Deploy Mock Oracle
    const MockOracle = await ethers.getContractFactory("MockPriceOracle");
    mockOracle = await MockOracle.deploy();
    await mockOracle.waitForDeployment();

    // Deploy OrphiCrowdFund
    const OrphiCrowdFund = await ethers.getContractFactory("OrphiCrowdFund");
    orphiCrowdFund = await upgrades.deployProxy(
      OrphiCrowdFund,
      [await mockUSDT.getAddress(), adminReserve.address, owner.address],
      { initializer: "initialize" }
    );
    await orphiCrowdFund.waitForDeployment();

    // Grant roles
    const EMERGENCY_ROLE = await orphiCrowdFund.EMERGENCY_ROLE();
    const ORACLE_MANAGER_ROLE = await orphiCrowdFund.ORACLE_MANAGER_ROLE();
    await orphiCrowdFund.grantRole(EMERGENCY_ROLE, emergencyOperator.address);
    await orphiCrowdFund.grantRole(ORACLE_MANAGER_ROLE, oracleManager.address);

    // Setup oracle
    await orphiCrowdFund.connect(oracleManager).setPriceOracle(await mockOracle.getAddress());
    await mockOracle.setPrice(ethers.parseEther("1.0")); // $1 USDT
    await mockOracle.setHealthy(true);

    // Setup test funds
    const testAmount = ethers.parseUnits("10000", 6);
    const allUsers = [user1, user2, user3, ...users.slice(0, 20)];
    
    for (const user of allUsers) {
      await mockUSDT.mint(user.address, testAmount);
      await mockUSDT.connect(user).approve(await orphiCrowdFund.getAddress(), testAmount);
    }
  });

  describe("🚨 Circuit Breaker - Basic Functionality", function () {
    beforeEach(async function () {
      // Setup users with earnings for withdrawal testing
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_100);
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      await orphiCrowdFund.connect(user3).register(user2.address, PackageTier.PACKAGE_30);
    });

    it("Should enable circuit breaker with daily limits", async function () {
      const dailyLimit = ethers.parseUnits("1000", 6); // $1000 daily limit
      
      await orphiCrowdFund.enableCircuitBreaker(dailyLimit);
      
      const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
      expect(circuitBreakerInfo.enabled).to.be.true;
      expect(circuitBreakerInfo.dailyLimit).to.equal(dailyLimit);
      expect(circuitBreakerInfo.currentDayWithdrawals).to.equal(0);
    });

    it("Should disable circuit breaker", async function () {
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("1000", 6));
      await orphiCrowdFund.disableCircuitBreaker();
      
      const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
      expect(circuitBreakerInfo.enabled).to.be.false;
    });

    it("Should emit events when circuit breaker state changes", async function () {
      const dailyLimit = ethers.parseUnits("500", 6);
      
      await expect(orphiCrowdFund.enableCircuitBreaker(dailyLimit))
        .to.emit(orphiCrowdFund, "CircuitBreakerEnabled")
        .withArgs(dailyLimit, owner.address);
      
      await expect(orphiCrowdFund.disableCircuitBreaker())
        .to.emit(orphiCrowdFund, "CircuitBreakerDisabled")
        .withArgs(owner.address);
    });

    it("Should only allow admin to control circuit breaker", async function () {
      await expect(
        orphiCrowdFund.connect(user1).enableCircuitBreaker(ethers.parseUnits("1000", 6))
      ).to.be.revertedWithCustomError(orphiCrowdFund, "OwnableUnauthorizedAccount");
      
      await expect(
        orphiCrowdFund.connect(user1).disableCircuitBreaker()
      ).to.be.revertedWithCustomError(orphiCrowdFund, "OwnableUnauthorizedAccount");
    });
  });

  describe("💰 Daily Withdrawal Limits", function () {
    beforeEach(async function () {
      // Setup users with substantial earnings
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_200);
      
      // Build up earnings for user1
      for (let i = 0; i < 10; i++) {
        await orphiCrowdFund.connect(users[i]).register(user1.address, PackageTier.PACKAGE_100);
      }
      
      // Enable circuit breaker with modest daily limit
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("500", 6)); // $500 daily
    });

    it("Should track daily withdrawal amounts", async function () {
      const user1Info = await orphiCrowdFund.getUser(user1.address);
      const withdrawableAmount = user1Info.withdrawableAmount;
      
      if (withdrawableAmount > 0 && withdrawableAmount <= ethers.parseUnits("500", 6)) {
        await orphiCrowdFund.connect(user1).withdraw();
        
        const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
        expect(circuitBreakerInfo.currentDayWithdrawals).to.equal(withdrawableAmount);
      }
    });

    it("Should prevent withdrawals exceeding daily limit", async function () {
      // Set very low limit to trigger easily
      await orphiCrowdFund.disableCircuitBreaker();
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("50", 6)); // $50 daily
      
      const user1Info = await orphiCrowdFund.getUser(user1.address);
      if (user1Info.withdrawableAmount > ethers.parseUnits("50", 6)) {
        await expect(
          orphiCrowdFund.connect(user1).withdraw()
        ).to.be.revertedWith("OrphiCrowdFund: Circuit breaker triggered");
      }
    });

    it("Should reset daily withdrawals after 24 hours", async function () {
      const user1Info = await orphiCrowdFund.getUser(user1.address);
      if (user1Info.withdrawableAmount > 0 && user1Info.withdrawableAmount <= ethers.parseUnits("500", 6)) {
        // Make a withdrawal
        await orphiCrowdFund.connect(user1).withdraw();
        
        let circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
        const initialWithdrawals = circuitBreakerInfo.currentDayWithdrawals;
        expect(initialWithdrawals).to.be.greaterThan(0);
        
        // Fast forward 24+ hours
        await time.increase(25 * 60 * 60); // 25 hours
        
        // Check that daily withdrawals reset (this would be checked during next withdrawal)
        circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
        
        // Note: Reset happens during withdrawal, not automatically
        // This test verifies the time tracking mechanism
        expect(circuitBreakerInfo.lastResetDay).to.be.lessThan(Math.floor(Date.now() / 86400));
      }
    });

    it("Should handle multiple users within daily limit", async function () {
      // Multiple small withdrawals should work within limit
      const smallLimit = ethers.parseUnits("1000", 6); // Higher limit for this test
      await orphiCrowdFund.disableCircuitBreaker();
      await orphiCrowdFund.enableCircuitBreaker(smallLimit);
      
      // Register more users to have multiple withdrawal sources
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      await orphiCrowdFund.connect(user3).register(user1.address, PackageTier.PACKAGE_30);
      
      // Both should be able to withdraw if total is under limit
      const user2Info = await orphiCrowdFund.getUser(user2.address);
      const user3Info = await orphiCrowdFund.getUser(user3.address);
      
      const totalWithdrawals = user2Info.withdrawableAmount + user3Info.withdrawableAmount;
      
      if (totalWithdrawals <= smallLimit && user2Info.withdrawableAmount > 0) {
        await orphiCrowdFund.connect(user2).withdraw();
        
        if (user3Info.withdrawableAmount > 0) {
          const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
          const remaining = smallLimit - circuitBreakerInfo.currentDayWithdrawals;
          
          if (user3Info.withdrawableAmount <= remaining) {
            await orphiCrowdFund.connect(user3).withdraw();
          } else {
            await expect(
              orphiCrowdFund.connect(user3).withdraw()
            ).to.be.revertedWith("OrphiCrowdFund: Circuit breaker triggered");
          }
        }
      }
    });
  });

  describe("🎯 Manual Circuit Breaker Triggers", function () {
    beforeEach(async function () {
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_100);
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("1000", 6));
    });

    it("Should allow manual circuit breaker trigger", async function () {
      const reason = "Suspicious activity detected";
      
      await expect(orphiCrowdFund.triggerCircuitBreaker(reason))
        .to.emit(orphiCrowdFund, "CircuitBreakerTriggered")
        .withArgs(owner.address, reason);
      
      const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
      expect(circuitBreakerInfo.triggered).to.be.true;
    });

    it("Should prevent operations when circuit breaker is triggered", async function () {
      await orphiCrowdFund.triggerCircuitBreaker("Manual trigger for testing");
      
      // New registrations should be blocked
      await expect(
        orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50)
      ).to.be.revertedWith("OrphiCrowdFund: Circuit breaker triggered");
      
      // Withdrawals should be blocked
      const user1Info = await orphiCrowdFund.getUser(user1.address);
      if (user1Info.withdrawableAmount > 0) {
        await expect(
          orphiCrowdFund.connect(user1).withdraw()
        ).to.be.revertedWith("OrphiCrowdFund: Circuit breaker triggered");
      }
    });

    it("Should allow resetting circuit breaker", async function () {
      await orphiCrowdFund.triggerCircuitBreaker("Test trigger");
      
      await expect(orphiCrowdFund.resetCircuitBreaker("Issue resolved"))
        .to.emit(orphiCrowdFund, "CircuitBreakerReset")
        .withArgs(owner.address, "Issue resolved");
      
      const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
      expect(circuitBreakerInfo.triggered).to.be.false;
      
      // Operations should resume
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      expect(await orphiCrowdFund.isRegistered(user2.address)).to.be.true;
    });

    it("Should only allow emergency operators to trigger manually", async function () {
      await expect(
        orphiCrowdFund.connect(user1).triggerCircuitBreaker("Unauthorized trigger")
      ).to.be.revertedWithCustomError(orphiCrowdFund, "AccessControlUnauthorizedAccount");
    });
  });

  describe("🔍 Oracle Safeguards", function () {
    beforeEach(async function () {
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_100);
      await orphiCrowdFund.enableOracleGuard(500); // 5% deviation threshold
    });

    it("Should validate oracle price before operations", async function () {
      // Set normal price
      await mockOracle.setPrice(ethers.parseEther("1.0")); // $1.00
      await mockOracle.setHealthy(true);
      
      // Normal operation should work
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      expect(await orphiCrowdFund.isRegistered(user2.address)).to.be.true;
    });

    it("Should reject operations when oracle shows extreme price deviation", async function () {
      // Set price with extreme deviation (>5%)
      await mockOracle.setPrice(ethers.parseEther("1.10")); // $1.10 (10% increase)
      
      await expect(
        orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50)
      ).to.be.revertedWith("OrphiCrowdFund: Oracle price deviation too high");
    });

    it("Should reject operations when oracle is unhealthy", async function () {
      await mockOracle.setHealthy(false);
      
      await expect(
        orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50)
      ).to.be.revertedWith("OrphiCrowdFund: Oracle is unhealthy");
    });

    it("Should allow configuring price deviation thresholds", async function () {
      // Set stricter threshold
      await orphiCrowdFund.setOracleDeviationThreshold(200); // 2%
      
      // Price within 2% should work
      await mockOracle.setPrice(ethers.parseEther("1.01")); // $1.01 (1% increase)
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      
      // Price beyond 2% should fail
      await mockOracle.setPrice(ethers.parseEther("1.03")); // $1.03 (3% increase)
      await expect(
        orphiCrowdFund.connect(user3).register(user1.address, PackageTier.PACKAGE_30)
      ).to.be.revertedWith("OrphiCrowdFund: Oracle price deviation too high");
    });

    it("Should handle oracle failure gracefully", async function () {
      // Simulate oracle returning zero price
      await mockOracle.setPrice(0);
      
      await expect(
        orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50)
      ).to.be.revertedWith("OrphiCrowdFund: Invalid oracle price");
    });

    it("Should track price history for validation", async function () {
      // Set initial price
      await mockOracle.setPrice(ethers.parseEther("1.0"));
      await orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50);
      
      // Price history should be tracked
      const priceHistory = await orphiCrowdFund.getOraclePriceHistory();
      expect(priceHistory.length).to.be.greaterThan(0);
    });
  });

  describe("🔧 Emergency Controls Integration", function () {
    beforeEach(async function () {
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_100);
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("1000", 6));
      await orphiCrowdFund.enableOracleGuard(500);
    });

    it("Should integrate circuit breaker with emergency pause", async function () {
      // Trigger circuit breaker
      await orphiCrowdFund.triggerCircuitBreaker("Emergency detected");
      
      // Emergency pause should also be available
      await orphiCrowdFund.connect(emergencyOperator).emergencyPause("Additional safety measure");
      
      expect(await orphiCrowdFund.paused()).to.be.true;
      
      const circuitBreakerInfo = await orphiCrowdFund.getCircuitBreakerInfo();
      expect(circuitBreakerInfo.triggered).to.be.true;
    });

    it("Should allow emergency operations when circuit breaker is active", async function () {
      await orphiCrowdFund.triggerCircuitBreaker("Test emergency");
      
      // Emergency functions should still work
      const contractBalance = await mockUSDT.balanceOf(await orphiCrowdFund.getAddress());
      if (contractBalance > 0) {
        await orphiCrowdFund.connect(emergencyOperator).emergencyWithdraw(
          await mockUSDT.getAddress(),
          contractBalance,
          "Emergency fund recovery"
        );
      }
    });

    it("Should prioritize emergency pause over circuit breaker", async function () {
      // Both emergency pause and circuit breaker active
      await orphiCrowdFund.connect(emergencyOperator).emergencyPause("Priority test");
      await orphiCrowdFund.triggerCircuitBreaker("Secondary safety");
      
      // Emergency unpause should allow operations even with circuit breaker
      await orphiCrowdFund.connect(emergencyOperator).emergencyUnpause("Emergency resolved");
      
      // Circuit breaker should still be active, but operations blocked by it
      await expect(
        orphiCrowdFund.connect(user2).register(user1.address, PackageTier.PACKAGE_50)
      ).to.be.revertedWith("OrphiCrowdFund: Circuit breaker triggered");
    });
  });

  describe("📊 Monitoring and Alerts", function () {
    beforeEach(async function () {
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_100);
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("1000", 6));
    });

    it("Should emit detailed events for monitoring", async function () {
      const user1Info = await orphiCrowdFund.getUser(user1.address);
      if (user1Info.withdrawableAmount > 0) {
        await expect(orphiCrowdFund.connect(user1).withdraw())
          .to.emit(orphiCrowdFund, "WithdrawalWithCircuitBreaker")
          .withArgs(user1.address, user1Info.withdrawableAmount, anyValue, anyValue);
      }
    });

    it("Should provide comprehensive circuit breaker status", async function () {
      const status = await orphiCrowdFund.getCircuitBreakerInfo();
      
      expect(status).to.have.property('enabled');
      expect(status).to.have.property('triggered');
      expect(status).to.have.property('dailyLimit');
      expect(status).to.have.property('currentDayWithdrawals');
      expect(status).to.have.property('lastResetDay');
    });

    it("Should track oracle guard statistics", async function () {
      await orphiCrowdFund.enableOracleGuard(500);
      
      const oracleStats = await orphiCrowdFund.getOracleGuardStats();
      expect(oracleStats).to.have.property('enabled');
      expect(oracleStats).to.have.property('deviationThreshold');
      expect(oracleStats).to.have.property('lastValidPrice');
      expect(oracleStats).to.have.property('deviationCount');
    });
  });

  describe("🎯 Stress Testing", function () {
    it("Should handle rapid withdrawal attempts under circuit breaker", async function () {
      // Setup multiple users with earnings
      await orphiCrowdFund.connect(user1).register(owner.address, PackageTier.PACKAGE_200);
      
      for (let i = 0; i < 5; i++) {
        await orphiCrowdFund.connect(users[i]).register(user1.address, PackageTier.PACKAGE_50);
      }
      
      // Set low daily limit
      await orphiCrowdFund.enableCircuitBreaker(ethers.parseUnits("100", 6));
      
      // Multiple users try to withdraw simultaneously
      let successfulWithdrawals = 0;
      let failedWithdrawals = 0;
      
      for (let i = 0; i < 3; i++) {
        try {
          const userInfo = await orphiCrowdFund.getUser(users[i].address);
          if (userInfo.withdrawableAmount > 0) {
            await orphiCrowdFund.connect(users[i]).withdraw();
            successfulWithdrawals++;
          }
        } catch (error) {
          if (error.message.includes("Circuit breaker triggered")) {
            failedWithdrawals++;
          }
        }
      }
      
      // Circuit breaker should have protected the system
      expect(successfulWithdrawals + failedWithdrawals).to.be.greaterThan(0);
    });

    it("Should maintain system integrity under oracle attacks", async function () {
      await orphiCrowdFund.enableOracleGuard(300); // 3% threshold
      
      // Simulate oracle manipulation attempts
      const prices = [
        ethers.parseEther("1.05"), // 5% up
        ethers.parseEther("0.95"), // 5% down
        ethers.parseEther("1.02"), // 2% up (should work)
        ethers.parseEther("1.08"), // 8% up
      ];
      
      let successfulOperations = 0;
      let blockedOperations = 0;
      
      for (let i = 0; i < prices.length; i++) {
        await mockOracle.setPrice(prices[i]);
        
        try {
          await orphiCrowdFund.connect(users[i]).register(user1.address, PackageTier.PACKAGE_30);
          successfulOperations++;
        } catch (error) {
          if (error.message.includes("Oracle price deviation")) {
            blockedOperations++;
          }
        }
      }
      
      // Only reasonable price should have worked
      expect(successfulOperations).to.be.lessThan(prices.length);
      expect(blockedOperations).to.be.greaterThan(0);
    });
  });
});

// Helper for any value matching in events
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
