import React, { useState, useEffect } from 'react';import { ethers } from 'ethers';import './OrphiChainEnhanced.css';const TransactionManager = ({  provider,  signer,  onTransactionUpdate,  onError,  maxConcurrentTx = 3,  maxQueueSize = 10,  enableBatching = true}) => {  // Transaction state management  const [transactionQueue, setTransactionQueue] = useState([]);  const [activeTransactions, setActiveTransactions] = useState(new Map());  const [completedTransactions, setCompletedTransactions] = useState([]);    // UI state  const [showManager, setShowManager] = useState(false);  const [selectedTransaction, setSelectedTransaction] = useState(null);  // Transaction priorities  const TRANSACTION_PRIORITIES = {    LOW: 1,    NORMAL: 2,    HIGH: 3,    URGENT: 4  };  // Transaction status types  const TRANSACTION_STATUS = {    QUEUED: 'queued',    PENDING: 'pending',    CONFIRMING: 'confirming',    CONFIRMED: 'confirmed',    FAILED: 'failed',    CANCELLED: 'cancelled'  };  // Add transaction to queue  const addTransaction = (transactionConfig) => {    if (transactionQueue.length >= maxQueueSize) {      onError?.('Transaction queue is full. Please wait for pending transactions to complete.');      return null;    }    const transaction = {      id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,      timestamp: Date.now(),      priority: transactionConfig.priority || TRANSACTION_PRIORITIES.NORMAL,      status: TRANSACTION_STATUS.QUEUED,      ...transactionConfig    };    setTransactionQueue(prev => [...prev, transaction]);    return transaction.id;  };  // Cancel transaction (if still in queue)  const cancelTransaction = (transactionId) => {    setTransactionQueue(prev => {      const filtered = prev.filter(tx => tx.id !== transactionId);      if (filtered.length < prev.length) {        onTransactionUpdate?.({          id: transactionId,          status: TRANSACTION_STATUS.CANCELLED        });      }      return filtered;    });  };  // Get transaction statistics  const getStatistics = () => {    const total = transactionQueue.length + activeTransactions.size + completedTransactions.length;    const success = completedTransactions.filter(tx => tx.status === TRANSACTION_STATUS.CONFIRMED).length;    const failed = completedTransactions.filter(tx => tx.status === TRANSACTION_STATUS.FAILED).length;    return {      total,      queued: transactionQueue.length,      active: activeTransactions.size,      completed: completedTransactions.length,      success,      failed,      successRate: total > 0 ? (success / (success + failed) * 100).toFixed(1) : 0    };  };  const stats = getStatistics();  // Render transaction item  const renderTransactionItem = (transaction) => (    <div       key={transaction.id}       className={`transaction-item ${transaction.status}`}      onClick={() => setSelectedTransaction(transaction)}    >      <div className="transaction-info">        <div className="transaction-title">{transaction.description || 'Transaction'}</div>        <div className="transaction-meta">          <span className="transaction-id">ID: {transaction.id.slice(-8)}</span>          <span className={`transaction-priority priority-${transaction.priority}`}>            {Object.keys(TRANSACTION_PRIORITIES).find(key =>               TRANSACTION_PRIORITIES[key] === transaction.priority            )}          </span>        </div>      </div>      <div className="transaction-status">        <div className={`status-indicator ${transaction.status}`}></div>        <span className="status-text">{transaction.status}</span>      </div>    </div>  );  if (!showManager) {    return (      <div className="transaction-manager-toggle">        <button           className="toggle-btn"          onClick={() => setShowManager(true)}          title="Open Transaction Manager"        >          <span className="queue-count">{stats.queued + stats.active}</span>          <span className="toggle-icon">âš¡</span>        </button>      </div>    );  }  return (    <div className="transaction-manager">      <div className="transaction-manager-header">        <h3>Transaction Manager</h3>        <button           className="close-btn"          onClick={() => setShowManager(false)}        >          Ã—        </button>      </div>      {/* Statistics Panel */}      <div className="transaction-stats">        <div className="stat-item">          <span className="stat-label">Queued:</span>          <span className="stat-value">{stats.queued}</span>        </div>        <div className="stat-item">          <span className="stat-label">Active:</span>          <span className="stat-value">{stats.active}</span>        </div>        <div className="stat-item">          <span className="stat-label">Success Rate:</span>          <span className="stat-value">{stats.successRate}%</span>        </div>      </div>      {/* Transaction Lists */}      <div className="transaction-lists">        {/* Queued Transactions */}        {transactionQueue.length > 0 && (          <div className="transaction-section">            <h4>Queued ({transactionQueue.length})</h4>            <div className="transaction-list">              {transactionQueue.map(renderTransactionItem)}            </div>          </div>        )}        {/* Active Transactions */}        {activeTransactions.size > 0 && (          <div className="transaction-section">            <h4>Active ({activeTransactions.size})</h4>            <div className="transaction-list">              {Array.from(activeTransactions.values()).map(renderTransactionItem)}            </div>          </div>        )}        {/* Recent Completed */}        {completedTransactions.length > 0 && (          <div className="transaction-section">            <h4>Recent Completed</h4>            <div className="transaction-list">              {completedTransactions.slice(0, 5).map(renderTransactionItem)}            </div>          </div>        )}        {/* Empty State */}        {transactionQueue.length === 0 && activeTransactions.size === 0 && completedTransactions.length === 0 && (          <div className="empty-state">            <div className="empty-icon">ðŸ“‹</div>            <p>No transactions in queue</p>          </div>        )}      </div>      {/* Transaction Details Modal */}      {selectedTransaction && (        <div className="transaction-modal" onClick={() => setSelectedTransaction(null)}>          <div className="transaction-modal-content" onClick={e => e.stopPropagation()}>            <div className="modal-header">              <h4>Transaction Details</h4>              <button onClick={() => setSelectedTransaction(null)}>Ã—</button>            </div>            <div className="modal-body">              <div className="detail-row">                <span className="detail-label">ID:</span>                <span className="detail-value">{selectedTransaction.id}</span>              </div>              <div className="detail-row">                <span className="detail-label">Status:</span>                <span className={`detail-value ${selectedTransaction.status}`}>                  {selectedTransaction.status}                </span>              </div>              {selectedTransaction.hash && (                <div className="detail-row">                  <span className="detail-label">Hash:</span>                  <span className="detail-value hash">{selectedTransaction.hash}</span>                </div>              )}              {selectedTransaction.error && (                <div className="detail-row">                  <span className="detail-label">Error:</span>                  <span className="detail-value error">{selectedTransaction.error}</span>                </div>              )}            </div>          </div>        </div>      )}    </div>  );};export default TransactionManager;