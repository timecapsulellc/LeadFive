import React, { useState, useEffect, useCallback, Suspense, useMemo } from 'react';
import { ethers } from 'ethers';
import ErrorBoundary from '../ErrorBoundary';

// Import dashboard components
import OrphiDashboard from '../OrphiDashboard';
import MatrixDashboard from '../MatrixDashboard';
import TeamAnalyticsDashboard from '../TeamAnalyticsDashboard';
import GenealogyTreeIntegration from './GenealogyTreeIntegration';
import ChartsBundle from '../ChartsBundle';

import '../styles/dashboard.css';
import '../OrphiDashboard.css';

// Import ABI (using a mock for now - will be replaced with actual ABI)
const OrphiCrowdFundV4UltraSecureABI = {
  abi: [
    // Mock ABI - replace with actual contract ABI
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {"internalType": "uint256", "name": "balance", "type": "uint256"},
        {"internalType": "uint256", "name": "level", "type": "uint256"}
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]
};

/**
 * UnifiedDashboard - Comprehensive Dashboard System
 * 
 * This unified dashboard consolidates all previously developed features:
 * - Overview Dashboard (system stats, activity feed, metrics)
 * - Matrix Dashboard (network tree visualization, genealogy)
 * - Analytics Dashboard (team performance, charts, insights)
 * - Genealogy Tree (interactive family tree visualization)
 * - Admin Dashboard (management controls, user administration)
 * 
 * Features:
 * - Tabbed interface for seamless navigation
 * - Responsive design for all devices
 * - Real-time data updates
 * - Error boundaries for component resilience
 * - Unified state management
 * - Theme support (light/dark)
 * - Notification system
 */

// Contract addresses
const ORPHICROWDFUND_CONTRACT_ADDRESS = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
const MOCKUSDT_CONTRACT_ADDRESS = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const ADMIN_ADDRESS = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";

const UnifiedDashboard = ({ 
  contractAddress: propContractAddress, 
  userAddress, 
  provider, 
  theme = 'dark',
  demoMode: initialDemoMode = true 
}) => {
  // Main state management
  const [activeTab, setActiveTab] = useState('overview');
  const [isLoading, setIsLoading] = useState(true);
  const [demoMode, setDemoMode] = useState(initialDemoMode);
  const [currentTheme, setCurrentTheme] = useState(theme);
  const [notifications, setNotifications] = useState([]);
  const [lastUpdate, setLastUpdate] = useState(new Date());

  // Dashboard data state
  const [dashboardData, setDashboardData] = useState({
    globalStats: {
      totalUsers: '0',
      totalValueLockedUSDT: '0', 
      totalRewardsDistributedUSDT: '0',
      activePools: '0',
      totalTransactions: '0',
      averageROI: '0',
      networkGrowth: '0'
    },
    userInfo: {
      address: userAddress || '',
      balance: '0',
      rewards: '0',
      level: 1,
      referrals: 0,
      totalEarnings: '0',
      matrixPosition: null,
      rank: 'Beginner'
    },
    matrixData: {
      levels: [],
      genealogyTree: null,
      networkStructure: null
    },
    activityFeed: [],
    analytics: {
      charts: [],
      performance: {},
      insights: []
    }
  });

  // Device detection
  const [deviceInfo, setDeviceInfo] = useState({
    isMobile: false,
    isTablet: false,
    isDesktop: true,
    touchEnabled: false,
    width: window.innerWidth,
    height: window.innerHeight
  });

  // Contract instance
  const [contract, setContract] = useState(null);

  // Memoized contract setup
  const contractInstance = useMemo(() => {
    if (!provider) return null;
    try {
      const contractAddr = propContractAddress || ORPHICROWDFUND_CONTRACT_ADDRESS;
      return new ethers.Contract(contractAddr, OrphiCrowdFundV4UltraSecureABI.abi, provider);
    } catch (error) {
      console.error('Error creating contract instance:', error);
      return null;
    }
  }, [provider, propContractAddress]);

  // Device detection effect
  useEffect(() => {
    const detectDevice = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      const touchEnabled = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
      
      setDeviceInfo({
        isMobile: width < 768,
        isTablet: width >= 768 && width < 1024,
        isDesktop: width >= 1024,
        touchEnabled,
        width,
        height
      });
    };

    detectDevice();
    window.addEventListener('resize', detectDevice);
    return () => window.removeEventListener('resize', detectDevice);
  }, []);

  // Load demo data
  const loadDemoData = useCallback(async () => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setDashboardData(prevData => ({
      ...prevData,
      globalStats: {
        totalUsers: '12,847',
        totalValueLockedUSDT: '2,847,392.50',
        totalRewardsDistributedUSDT: '1,293,847.25',
        activePools: '24',
        totalTransactions: '47,293',
        averageROI: '23.7%',
        networkGrowth: '+12.3%'
      },
      userInfo: {
        address: userAddress || '0x742d35Cc6629C0532c3C123123cF',
        balance: '1,247.89',
        rewards: '387.42',
        level: 7,
        referrals: 23,
        totalEarnings: '2,847.31',
        matrixPosition: { x: 3, y: 2, level: 7 },
        rank: 'Gold Member'
      },
      activityFeed: generateDemoActivityFeed(),
      analytics: generateDemoAnalytics()
    }));
    
    setLastUpdate(new Date());
    addNotification('success', 'Dashboard data loaded successfully');
  }, [userAddress]);

  // Load blockchain data
  const loadBlockchainData = useCallback(async () => {
    if (!contractInstance || !userAddress) {
      console.log('Contract or user address not available');
      return;
    }

    try {
      // Fetch real blockchain data
      const [globalStats, userInfo] = await Promise.all([
        fetchGlobalStats(),
        fetchUserInfo()
      ]);

      setDashboardData(prevData => ({
        ...prevData,
        globalStats,
        userInfo
      }));

      setLastUpdate(new Date());
      addNotification('success', 'Blockchain data updated');
    } catch (error) {
      console.error('Error loading blockchain data:', error);
      addNotification('error', 'Failed to load blockchain data');
    }
  }, [contractInstance, userAddress]);

  // Refresh dashboard data
  const refreshDashboardData = useCallback(async () => {
    if (demoMode) {
      // Update demo data with slight variations
      setDashboardData(prevData => ({
        ...prevData,
        globalStats: {
          ...prevData.globalStats,
          totalUsers: (parseInt(prevData.globalStats.totalUsers.replace(/,/g, '')) + Math.floor(Math.random() * 5)).toLocaleString(),
          networkGrowth: `+${(Math.random() * 5 + 10).toFixed(1)}%`
        }
      }));
    } else {
      await loadBlockchainData();
    }
    setLastUpdate(new Date());
  }, [demoMode, loadBlockchainData]);

  // Initialize dashboard data
  useEffect(() => {
    const initializeDashboard = async () => {
      setIsLoading(true);
      try {
        if (demoMode) {
          // Load demo data
          await loadDemoData();
        } else {
          // Load real data from blockchain
          await loadBlockchainData();
        }
      } catch (error) {
        console.error('Error initializing dashboard:', error);
        addNotification('error', 'Failed to load dashboard data');
      } finally {
        setIsLoading(false);
      }
    };

    initializeDashboard();
  }, [demoMode, loadDemoData, loadBlockchainData]);

  // Auto-refresh data
  useEffect(() => {
    const interval = setInterval(() => {
      if (!isLoading) {
        refreshDashboardData();
      }
    }, 30000); // Refresh every 30 seconds

    return () => clearInterval(interval);
  }, [isLoading, refreshDashboardData]);
    
    setDashboardData(prevData => ({
      ...prevData,
      globalStats: {
        totalUsers: '12,847',
        totalValueLockedUSDT: '2,847,392.50',
        totalRewardsDistributedUSDT: '1,293,847.25',
        activePools: '24',
        totalTransactions: '47,293',
        averageROI: '23.7%',
        networkGrowth: '+12.3%'
      },
      userInfo: {
        address: userAddress || '0x742d35Cc6629C0532c3C123123cF',
        balance: '1,247.89',
        rewards: '387.42',
        level: 7,
        referrals: 23,
        totalEarnings: '2,847.31',
        matrixPosition: { x: 3, y: 2, level: 7 },
        rank: 'Gold Member'
      },
      activityFeed: generateDemoActivityFeed(),
      analytics: generateDemoAnalytics()
    }));
    
    setLastUpdate(new Date());
    addNotification('success', 'Dashboard data loaded successfully');
  };

  // Load blockchain data
  const loadBlockchainData = async () => {
    if (!contractInstance || !userAddress) {
      console.log('Contract or user address not available');
      return;
    }

    try {
      // Fetch real blockchain data
      const [globalStats, userInfo] = await Promise.all([
        fetchGlobalStats(),
        fetchUserInfo()
      ]);

      setDashboardData(prevData => ({
        ...prevData,
        globalStats,
        userInfo
      }));

      setLastUpdate(new Date());
      addNotification('success', 'Blockchain data updated');
    } catch (error) {
      console.error('Error loading blockchain data:', error);
      addNotification('error', 'Failed to load blockchain data');
    }
  };

  // Refresh dashboard data
  const refreshDashboardData = async () => {
    if (demoMode) {
      // Update demo data with slight variations
      setDashboardData(prevData => ({
        ...prevData,
        globalStats: {
          ...prevData.globalStats,
          totalUsers: (parseInt(prevData.globalStats.totalUsers.replace(/,/g, '')) + Math.floor(Math.random() * 5)).toLocaleString(),
          networkGrowth: `+${(Math.random() * 5 + 10).toFixed(1)}%`
        }
      }));
    } else {
      await loadBlockchainData();
    }
    setLastUpdate(new Date());
  };

  // Notification system
  const addNotification = (type, message) => {
    const notification = {
      id: Date.now(),
      type,
      message,
      timestamp: new Date()
    };
    setNotifications(prev => [notification, ...prev.slice(0, 4)]);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id));
    }, 5000);
  };

  // Generate demo data helpers
  const generateDemoActivityFeed = () => [
    {
      id: 1,
      type: 'reward',
      message: 'Received 47.3 USDT reward from Level 5',
      timestamp: new Date(Date.now() - 300000),
      amount: '47.3'
    },
    {
      id: 2,
      type: 'referral',
      message: 'New team member joined your network',
      timestamp: new Date(Date.now() - 900000),
      user: '0x742d...123cF'
    },
    {
      id: 3,
      type: 'level_up',
      message: 'Congratulations! You reached Level 7',
      timestamp: new Date(Date.now() - 1800000),
      level: 7
    },
    {
      id: 4,
      type: 'transaction',
      message: 'Matrix position upgraded successfully',
      timestamp: new Date(Date.now() - 3600000),
      amount: '100.0'
    }
  ];

  const generateDemoAnalytics = () => ({
    charts: [
      {
        id: 'earnings',
        type: 'line',
        title: 'Earnings Over Time',
        data: Array.from({ length: 30 }, (_, i) => ({
          date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000),
          value: Math.random() * 100 + 50
        }))
      },
      {
        id: 'referrals',
        type: 'bar',
        title: 'Referral Activity',
        data: Array.from({ length: 7 }, (_, i) => ({
          day: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][i],
          value: Math.floor(Math.random() * 10)
        }))
      }
    ],
    performance: {
      totalROI: '23.7%',
      monthlyGrowth: '+12.3%',
      efficiency: '87%'
    },
    insights: [
      'Your network is growing 15% faster than average',
      'Consider upgrading to Level 8 for better rewards',
      'Top performing day: Wednesdays'
    ]
  });

  // Fetch functions for blockchain data
  const fetchGlobalStats = async () => {
    // Implementation for fetching global stats from contract
    return {
      totalUsers: '0',
      totalValueLockedUSDT: '0',
      totalRewardsDistributedUSDT: '0',
      activePools: '0',
      totalTransactions: '0',
      averageROI: '0%',
      networkGrowth: '0%'
    };
  };

  const fetchUserInfo = async () => {
    // Implementation for fetching user info from contract
    return {
      address: userAddress || '',
      balance: '0',
      rewards: '0',
      level: 1,
      referrals: 0,
      totalEarnings: '0',
      matrixPosition: null,
      rank: 'Beginner'
    };
  };

  // Tab configuration
  const tabs = [
    { id: 'overview', label: 'Overview', icon: '📊' },
    { id: 'matrix', label: 'Matrix', icon: '🔗' },
    { id: 'analytics', label: 'Analytics', icon: '📈' },
    { id: 'genealogy', label: 'Genealogy', icon: '🌳' },
    { id: 'admin', label: 'Admin', icon: '⚙️' }
  ];

  // Loading screen
  if (isLoading) {
    return (
      <div className="unified-dashboard-loading">
        <div className="loading-container">
          <div className="orphi-logo-loader">
            <div className="logo-ring"></div>
            <div className="logo-inner-ring"></div>
            <div className="logo-center">Ω</div>
          </div>
          <h2>OrphiChain Dashboard</h2>
          <p>Loading your comprehensive dashboard...</p>
          <div className="loading-progress">
            <div className="progress-bar"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`unified-dashboard unified-dashboard-${currentTheme} ${deviceInfo.isMobile ? 'mobile' : deviceInfo.isTablet ? 'tablet' : 'desktop'}`}>
      {/* Header */}
      <header className="dashboard-header">
        <div className="header-content">
          <div className="header-left">
            <div className="logo">
              <span className="logo-symbol">Ω</span>
              <span className="logo-text">OrphiChain</span>
            </div>
            <div className="header-stats">
              <div className="stat-item">
                <span className="stat-label">TVL:</span>
                <span className="stat-value">${dashboardData.globalStats.totalValueLockedUSDT}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">Users:</span>
                <span className="stat-value">{dashboardData.globalStats.totalUsers}</span>
              </div>
            </div>
          </div>
          
          <div className="header-right">
            <div className="header-controls">
              <button 
                className={`mode-toggle ${demoMode ? 'demo' : 'live'}`}
                onClick={() => setDemoMode(!demoMode)}
                title={`Switch to ${demoMode ? 'Live' : 'Demo'} Mode`}
              >
                {demoMode ? '🎭 Demo' : '🔴 Live'}
              </button>
              
              <button 
                className={`theme-toggle ${currentTheme}`}
                onClick={() => setCurrentTheme(currentTheme === 'dark' ? 'light' : 'dark')}
                title="Toggle Theme"
              >
                {currentTheme === 'dark' ? '☀️' : '🌙'}
              </button>
              
              <button 
                className="refresh-btn"
                onClick={refreshDashboardData}
                title="Refresh Data"
              >
                🔄
              </button>
            </div>
            
            <div className="user-info">
              {dashboardData.userInfo.address && (
                <>
                  <span className="user-address">
                    {dashboardData.userInfo.address.slice(0, 6)}...{dashboardData.userInfo.address.slice(-4)}
                  </span>
                  <span className="user-rank">{dashboardData.userInfo.rank}</span>
                </>
              )}
            </div>
          </div>
        </div>
        
        {/* Last update info */}
        <div className="header-footer">
          <span className="last-update">
            Last updated: {lastUpdate.toLocaleTimeString()}
          </span>
        </div>
      </header>

      {/* Notifications */}
      {notifications.length > 0 && (
        <div className="notifications-container">
          {notifications.map(notification => (
            <div key={notification.id} className={`notification notification-${notification.type}`}>
              <span className="notification-message">{notification.message}</span>
              <button 
                className="notification-close"
                onClick={() => setNotifications(prev => prev.filter(n => n.id !== notification.id))}
              >
                ×
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Tab Navigation */}
      <nav className="dashboard-nav">
        <div className="nav-tabs">
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`nav-tab ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className="tab-icon">{tab.icon}</span>
              <span className="tab-label">{tab.label}</span>
            </button>
          ))}
        </div>
      </nav>

      {/* Main Content */}
      <main className="dashboard-main">
        <ErrorBoundary>
          <Suspense fallback={<div className="tab-loading">Loading {activeTab}...</div>}>
            {activeTab === 'overview' && (
              <div className="tab-content">
                <OrphiDashboard 
                  demoMode={demoMode}
                  dashboardData={dashboardData}
                  theme={currentTheme}
                  onNotification={addNotification}
                />
              </div>
            )}
            
            {activeTab === 'matrix' && (
              <div className="tab-content">
                <MatrixDashboard 
                  demoMode={demoMode}
                  dashboardData={dashboardData}
                  theme={currentTheme}
                  onNotification={addNotification}
                />
              </div>
            )}
            
            {activeTab === 'analytics' && (
              <div className="tab-content">
                <TeamAnalyticsDashboard 
                  demoMode={demoMode}
                  dashboardData={dashboardData}
                  theme={currentTheme}
                  onNotification={addNotification}
                />
                <div className="charts-section">
                  <ChartsBundle 
                    data={dashboardData.analytics.charts}
                    theme={currentTheme}
                  />
                </div>
              </div>
            )}
            
            {activeTab === 'genealogy' && (
              <div className="tab-content">
                <GenealogyTreeIntegration 
                  demoMode={demoMode}
                  dashboardData={dashboardData}
                  theme={currentTheme}
                  onNotification={addNotification}
                />
              </div>
            )}
            
            {activeTab === 'admin' && (
              <div className="tab-content">
                <div className="admin-dashboard">
                  <h2>Admin Panel</h2>
                  <div className="admin-sections">
                    <div className="admin-section">
                      <h3>User Management</h3>
                      <div className="admin-controls">
                        <button className="admin-btn">View All Users</button>
                        <button className="admin-btn">Manage Levels</button>
                        <button className="admin-btn">Reward Distribution</button>
                      </div>
                    </div>
                    
                    <div className="admin-section">
                      <h3>System Settings</h3>
                      <div className="admin-controls">
                        <button className="admin-btn">Contract Settings</button>
                        <button className="admin-btn">Fee Configuration</button>
                        <button className="admin-btn">Emergency Controls</button>
                      </div>
                    </div>
                    
                    <div className="admin-section">
                      <h3>Analytics & Reports</h3>
                      <div className="admin-controls">
                        <button className="admin-btn">Generate Reports</button>
                        <button className="admin-btn">System Health</button>
                        <button className="admin-btn">Audit Logs</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </Suspense>
        </ErrorBoundary>
      </main>

      {/* Development info (only in demo mode) */}
      {demoMode && process.env.NODE_ENV === 'development' && (
        <div className="dev-info">
          <div className="dev-info-header">🔧 Development Info</div>
          <div className="dev-info-content">
            <div>Device: {deviceInfo.isMobile ? 'Mobile' : deviceInfo.isTablet ? 'Tablet' : 'Desktop'}</div>
            <div>Screen: {deviceInfo.width}x{deviceInfo.height}</div>
            <div>Touch: {deviceInfo.touchEnabled ? 'Yes' : 'No'}</div>
            <div>Mode: {demoMode ? 'Demo' : 'Live'}</div>
            <div>Theme: {currentTheme}</div>
            <div>Tab: {activeTab}</div>
            <div>User: {dashboardData.userInfo.address ? `${dashboardData.userInfo.address.slice(0, 6)}...${dashboardData.userInfo.address.slice(-4)}` : 'Not Connected'}</div>
            <div>Contract: {contractInstance ? 'Connected' : 'Disconnected'}</div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UnifiedDashboard;
