# ==================== LEADFIVE PRODUCTION DOCKER COMPOSE ====================
# Production deployment configuration for DigitalOcean
# Domain: leadfive.today

version: '3.8'

services:
  # ==================== LEADFIVE FRONTEND APPLICATION ====================
  leadfive-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: leadfive-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=production
      - VITE_CONTRACT_ADDRESS=${VITE_CONTRACT_ADDRESS}
      - VITE_NETWORK_ID=${VITE_NETWORK_ID}
      - VITE_WEB3_PROVIDER_URL=${VITE_WEB3_PROVIDER_URL}
      - VITE_DEBUG_MODE=false
    networks:
      - leadfive-network
    volumes:
      - app-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==================== NGINX REVERSE PROXY ====================
  nginx:
    image: nginx:alpine
    container_name: leadfive-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    networks:
      - leadfive-network
    depends_on:
      - leadfive-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SSL CERTIFICATE MANAGEMENT ====================
  certbot:
    image: certbot/certbot
    container_name: leadfive-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${SSL_EMAIL} --agree-tos --no-eff-email --staging -d ${DOMAIN}
    depends_on:
      - nginx

  # ==================== MONITORING & LOGGING ====================
  watchtower:
    image: containrrr/watchtower
    container_name: leadfive-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: --interval 3600 --cleanup

  # ==================== BACKUP SERVICE ====================
  backup:
    image: alpine:latest
    container_name: leadfive-backup
    restart: unless-stopped
    volumes:
      - app-data:/backup/app-data:ro
      - certbot-etc:/backup/ssl:ro
      - ./backups:/backups
    environment:
      - BACKUP_FREQUENCY=${BACKUP_FREQUENCY:-daily}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: |
      sh -c "
        apk add --no-cache dcron tar gzip &&
        echo '0 2 * * * tar -czf /backups/leadfive-backup-$$(date +%Y%m%d-%H%M%S).tar.gz /backup' | crontab - &&
        echo '0 3 * * * find /backups -name \"leadfive-backup-*.tar.gz\" -mtime +${BACKUP_RETENTION_DAYS:-30} -delete' | crontab - &&
        crond -f
      "

# ==================== NETWORKS ====================
networks:
  leadfive-network:
    driver: bridge
    name: leadfive-network

# ==================== VOLUMES ====================
volumes:
  app-data:
    name: leadfive-app-data
  certbot-etc:
    name: leadfive-certbot-etc
  certbot-var:
    name: leadfive-certbot-var
  web-root:
    name: leadfive-web-root

# ==================== DEPLOYMENT NOTES ====================
# 1. Copy .env.example to .env and fill in your values
# 2. Run: docker-compose up -d
# 3. Check logs: docker-compose logs -f
# 4. Update SSL to production: modify certbot command (remove --staging)
# 5. Monitor with: docker-compose ps
