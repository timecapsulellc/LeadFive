{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "proxiableUUID()",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)224_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)288_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "c18401848e06bfd9d2dd9f1fb3115d9d928def55ca8781860a810c1494a59f8b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "d1d01ca8b4e19122bd36243ed6da536e6e767c0c0400b2502d66b76c10bd4881",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "473d60c0451a5db8c737caf5fa65b6c6bd0f4a946a43fd052a6204a641b40854",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e85c0d8abaf275d0aed943cf4804f4d1746226744376f5126f3e5378de017d3a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/IPriceOracle.sol:IPriceOracle": {
        "src": "contracts/IPriceOracle.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "isHealthy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/LeadFive.sol:LeadFive": {
        "src": "contracts/LeadFive.sol:43",
        "version": {
          "withMetadata": "f818b006b3ec320c8fc3b91a8d734410fc2a196af3b5f0976ae1d2b604d74375",
          "withoutMetadata": "3143df0e49fc3d42633c223398c74dac700386b07bb03619e0a8bb8cef6f6986",
          "linkedWithoutMetadata": "3143df0e49fc3d42633c223398c74dac700386b07bb03619e0a8bb8cef6f6986"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/CoreOptimized.sol:CoreOptimized",
          "contracts/libraries/SecureOracle.sol:SecureOracle",
          "contracts/libraries/Errors.sol:Errors"
        ],
        "methods": [
          "initialize(address,address)",
          "register(address,uint8,bool)",
          "upgradePackage(uint8,bool)",
          "distributePool(uint8)",
          "calculateNetworkSize(address)",
          "withdraw(uint96)",
          "calculateWithdrawalRate(address)",
          "setPlatformFeeRecipient(address)",
          "addAdmin(address)",
          "removeAdmin(address)",
          "addOracle(address)",
          "setCircuitBreaker(uint256)",
          "emergencyPause()",
          "emergencyUnpause()",
          "emergencyWithdrawUSDT()",
          "setDailyWithdrawalLimit(uint256)",
          "getUserBasicInfo(address)",
          "getUserEarnings(address)",
          "getUserNetwork(address)",
          "getPoolBalance(uint8)",
          "getMatrixPosition(address)",
          "getContractBalance()",
          "getTotalUsers()",
          "getPackagePrice(uint8)",
          "getCurrentBNBPrice()",
          "isAdmin(address)",
          "getTotalPlatformFees()",
          "getUSDTBalance()",
          "verifyPackageAllocations(uint8)",
          "getSystemHealth()",
          "emergencyWithdraw()",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "users",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(PackedUser)10587_storage)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:55"
            },
            {
              "label": "packages",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_struct(PackedPackage)10602_storage)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:56"
            },
            {
              "label": "directNetwork",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:57"
            },
            {
              "label": "smartTreeMatrix",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)2_storage)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:58"
            },
            {
              "label": "userIds",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint32,t_address)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:59"
            },
            {
              "label": "leadershipPool",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(PackedPool)10611_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:62"
            },
            {
              "label": "communityPool",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(PackedPool)10611_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:63"
            },
            {
              "label": "clubPool",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(PackedPool)10611_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:64"
            },
            {
              "label": "algorithmicPool",
              "offset": 0,
              "slot": "8",
              "type": "t_struct(PackedPool)10611_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:65"
            },
            {
              "label": "oracles",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(OracleData)17003_storage)dyn_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:68"
            },
            {
              "label": "priceConfig",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(PriceConfig)17012_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:69"
            },
            {
              "label": "leftLegVolume",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:72"
            },
            {
              "label": "rightLegVolume",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:73"
            },
            {
              "label": "networkSizeCache",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:74"
            },
            {
              "label": "lastNetworkUpdate",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:75"
            },
            {
              "label": "isAdminAddress",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:78"
            },
            {
              "label": "dailyWithdrawals",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:79"
            },
            {
              "label": "lastWithdrawalDay",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:80"
            },
            {
              "label": "userLastTx",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:81"
            },
            {
              "label": "circuitBreakerThreshold",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:84"
            },
            {
              "label": "circuitBreakerTriggered",
              "offset": 0,
              "slot": "22",
              "type": "t_bool",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:85"
            },
            {
              "label": "lastTxBlock",
              "offset": 0,
              "slot": "23",
              "type": "t_uint256",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:86"
            },
            {
              "label": "totalUsers",
              "offset": 0,
              "slot": "24",
              "type": "t_uint32",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:90"
            },
            {
              "label": "totalPlatformFeesCollected",
              "offset": 4,
              "slot": "24",
              "type": "t_uint96",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:90"
            },
            {
              "label": "dailyWithdrawalLimit",
              "offset": 0,
              "slot": "25",
              "type": "t_uint256",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:91"
            },
            {
              "label": "usdt",
              "offset": 0,
              "slot": "26",
              "type": "t_contract(IERC20)2192",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:93"
            },
            {
              "label": "platformFeeRecipient",
              "offset": 0,
              "slot": "27",
              "type": "t_address",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:93"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "28",
              "type": "t_array(t_uint256)50_storage",
              "contract": "LeadFive",
              "src": "contracts/LeadFive.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)73_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)13_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PausableStorage)224_storage": {
              "label": "struct PausableUpgradeable.PausableStorage",
              "members": [
                {
                  "label": "_paused",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)288_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(OracleData)17003_storage)dyn_storage": {
              "label": "struct SecureOracle.OracleData[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_contract(IERC20)2192": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)16994": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)2_storage)": {
              "label": "mapping(address => address[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(PackedUser)10587_storage)": {
              "label": "mapping(address => struct CoreOptimized.PackedUser)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_address)": {
              "label": "mapping(uint32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_struct(PackedPackage)10602_storage)": {
              "label": "mapping(uint8 => struct CoreOptimized.PackedPackage)",
              "numberOfBytes": "32"
            },
            "t_struct(OracleData)17003_storage": {
              "label": "struct SecureOracle.OracleData",
              "members": [
                {
                  "label": "feed",
                  "type": "t_contract(IPriceFeed)16994",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "lastUpdate",
                  "type": "t_uint32",
                  "offset": 21,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PackedPackage)10602_storage": {
              "label": "struct CoreOptimized.PackedPackage",
              "members": [
                {
                  "label": "price",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "directBonus",
                  "type": "t_uint16",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "levelBonus",
                  "type": "t_uint16",
                  "offset": 14,
                  "slot": "0"
                },
                {
                  "label": "uplineBonus",
                  "type": "t_uint16",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "leaderBonus",
                  "type": "t_uint16",
                  "offset": 18,
                  "slot": "0"
                },
                {
                  "label": "helpBonus",
                  "type": "t_uint16",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "clubBonus",
                  "type": "t_uint16",
                  "offset": 22,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PackedPool)10611_storage": {
              "label": "struct CoreOptimized.PackedPool",
              "members": [
                {
                  "label": "balance",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastDistribution",
                  "type": "t_uint32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "interval",
                  "type": "t_uint32",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "totalDistributed",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(PackedUser)10587_storage": {
              "label": "struct CoreOptimized.PackedUser",
              "members": [
                {
                  "label": "flags",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "packageLevel",
                  "type": "t_uint8",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "rank",
                  "type": "t_uint8",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "withdrawalRate",
                  "type": "t_uint8",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "directReferrals",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "teamSize",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "registrationTime",
                  "type": "t_uint32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "lastWithdrawal",
                  "type": "t_uint32",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "matrixLevel",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "matrixCycles",
                  "type": "t_uint32",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "referrer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "balance",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "totalInvestment",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalEarnings",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "2"
                },
                {
                  "label": "totalWithdrawn",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "earningsCap",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "3"
                },
                {
                  "label": "leftLegVolume",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "rightLegVolume",
                  "type": "t_uint96",
                  "offset": 12,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(PriceConfig)17012_storage": {
              "label": "struct SecureOracle.PriceConfig",
              "members": [
                {
                  "label": "minPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "maxPrice",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maxStaleTime",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minOracles",
                  "type": "t_uint8",
                  "offset": 4,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockERC20.sol:MockERC20": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "33927f350ee30e95f9d01ff2c0773bfeec91b6431111ace72858d2e69ccd27b2",
          "withoutMetadata": "d6ae176349a1fadaeaa613c9b551e3315aa35eb6dfa7cdebd48eb0005d04e228",
          "linkedWithoutMetadata": "d6ae176349a1fadaeaa613c9b551e3315aa35eb6dfa7cdebd48eb0005d04e228"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/MockERC20.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/MockERC20.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockPriceFeed.sol:MockPriceFeed": {
        "src": "contracts/MockPriceFeed.sol:10",
        "version": {
          "withMetadata": "285aab4aac709fad44264256e1cd4e74be66e35a54cd34f09cf535b36b95ef2e",
          "withoutMetadata": "657163f4747f768f30ce4c80d3ada8eee5b199ddc01dc7de77d82b05e63626f7",
          "linkedWithoutMetadata": "657163f4747f768f30ce4c80d3ada8eee5b199ddc01dc7de77d82b05e63626f7"
        },
        "inherit": [
          "contracts/IPriceOracle.sol:IPriceOracle"
        ],
        "libraries": [],
        "methods": [
          "()",
          "getPrice(address)",
          "isHealthy()",
          "decimals()",
          "description()",
          "getLastUpdated()",
          "updatePrice(int256)",
          "setStalePrice()",
          "simulatePriceMovement()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockPriceFeed",
            "src": "contracts/MockPriceFeed.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:11"
            },
            {
              "label": "_lastUpdate",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:12"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:13"
            },
            {
              "label": "_description",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:14"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockPriceOracle.sol:MockPriceOracle": {
        "src": "contracts/MockPriceOracle.sol:8",
        "version": {
          "withMetadata": "3a9c16a2e0b8333597a0497e1d70f7ff0de8063eacf4ee973c309019089ddb25",
          "withoutMetadata": "c067610a77dfcf359d512656b769dd82cb5644de7bf053d360a415bd133e3005",
          "linkedWithoutMetadata": "c067610a77dfcf359d512656b769dd82cb5644de7bf053d360a415bd133e3005"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getPrice()",
          "setPrice(int256)",
          "decimals()",
          "lastUpdate()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockPriceOracle",
            "src": "contracts/MockPriceOracle.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockPriceOracle",
              "src": "contracts/MockPriceOracle.sol:9"
            },
            {
              "label": "_lastUpdate",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockPriceOracle",
              "src": "contracts/MockPriceOracle.sol:10"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "MockPriceOracle",
              "src": "contracts/MockPriceOracle.sol:11"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockUSDT.sol:MockUSDT": {
        "src": "contracts/MockUSDT.sol:6",
        "version": {
          "withMetadata": "903b7c34b8c0cc6acf4c3ef4f01800bdc3e55b4fa17fd4e1b2e7225928e665bc",
          "withoutMetadata": "2d6922ec085f168e301114c679733c5861ce43285f7685061f65108c9dbf1563",
          "linkedWithoutMetadata": "2d6922ec085f168e301114c679733c5861ce43285f7685061f65108c9dbf1563"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "faucet()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockUSDT",
            "src": "contracts/MockUSDT.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockWBNB.sol:MockWBNB": {
        "src": "contracts/MockWBNB.sol:12",
        "version": {
          "withMetadata": "2180da2fedc3c31c9b61d122e67aa858e35ddefbc84460ebadc529accd29d21d",
          "withoutMetadata": "2f75d801287f693652b3b91007c348a55bca743daf9c1b3bf9e71a17674614d0",
          "linkedWithoutMetadata": "2f75d801287f693652b3b91007c348a55bca743daf9c1b3bf9e71a17674614d0"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "decimals()",
          "deposit()",
          "()",
          "withdraw(uint256)",
          "mint(address,uint256)",
          "mintBatch(address[],uint256[])",
          "faucet()",
          "drain(address)",
          "getInfo()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBNB",
            "src": "contracts/MockWBNB.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockWBNB",
              "src": "contracts/MockWBNB.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SimpleUSDTSetter.sol:SimpleUSDTSetter": {
        "src": "contracts/SimpleUSDTSetter.sol:8",
        "version": {
          "withMetadata": "a859307e4f89b125782880299776e09f0b566b953b68c171728f222a5b16ce7e",
          "withoutMetadata": "b54294c162a97bca7a56ed7a566f2ffe3a17533117883e20b8e9eaad17cd1bd7",
          "linkedWithoutMetadata": "b54294c162a97bca7a56ed7a566f2ffe3a17533117883e20b8e9eaad17cd1bd7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUSDT(address)",
          "getUSDT()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "usdt",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "SimpleUSDTSetter",
              "src": "contracts/SimpleUSDTSetter.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/StorageSetter.sol:StorageSetter": {
        "src": "contracts/StorageSetter.sol:8",
        "version": {
          "withMetadata": "dedc90e1f3e0c06605c8a75aeb80251c6defee474ab781e4a076e6a63426b0df",
          "withoutMetadata": "a9935db936b43cee502fb5d39b8fdda0d820b049da451c5d43015466a8d3c805",
          "linkedWithoutMetadata": "a9935db936b43cee502fb5d39b8fdda0d820b049da451c5d43015466a8d3c805"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setStorageSlot(address,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IOrphiCrowdFund.sol:IOrphiCrowdFund": {
        "src": "contracts/interfaces/IOrphiCrowdFund.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proposeUpgrade(address)",
          "executeUpgrade(bytes32)",
          "cancelUpgrade(bytes32)",
          "setupUpgradeMultiSig(address[],uint256)",
          "signUpgrade(bytes32)",
          "register(address,uint8)",
          "contribute(address,uint8)",
          "BASIS_POINTS()",
          "UPGRADE_DELAY()",
          "POOL_MANAGER_ROLE()",
          "EMERGENCY_ROLE()",
          "UPGRADER_ROLE()",
          "ADMIN_ROLE()",
          "PAUSER_ROLE()",
          "getPendingUpgrades()",
          "getUpgradeProposal(bytes32)",
          "getUserEarnings(address)",
          "globalHelpPoolBalance()",
          "constants()",
          "getBasisPoints()",
          "getProxyAdmin()",
          "getImplementation()",
          "getLeaderInfo(address)",
          "getNodeInfo(address)",
          "getAdvancedCompensationInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/AdvancedFeaturesLib.sol:AdvancedFeaturesLib": {
        "src": "contracts/libraries/AdvancedFeaturesLib.sol:10",
        "version": {
          "withMetadata": "dad26c7a159f71af0d102a89f28b8a1707aadb2eb1b4d64a04260d20ffa22705",
          "withoutMetadata": "865d9286749a30f2c0ffc73b8607f670af912ec37edaf9e95d335a57080e01cb",
          "linkedWithoutMetadata": "865d9286749a30f2c0ffc73b8607f670af912ec37edaf9e95d335a57080e01cb"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/DataStructures.sol:DataStructures"
        ],
        "methods": [
          "checkCircuitBreaker(uint256,uint256,uint256,mapping(uint256 => uint256) storage)",
          "checkAchievements(DataStructures.User storage,mapping(address => mapping(uint32 => bool)) storage,address)",
          "calculateMatchingBonus(DataStructures.User storage,uint256)",
          "calculateBinaryBonus(uint256,uint256,uint256)",
          "sendNotification(mapping(address => struct AdvancedFeaturesLib.UserNotifications) storage,AdvancedFeaturesLib.NotificationQueue storage,address,uint8,string)",
          "markAsRead(mapping(address => struct AdvancedFeaturesLib.UserNotifications) storage,address,uint256)",
          "claimAllRewards(DataStructures.User storage,mapping(address => uint256) storage,mapping(address => uint256) storage,mapping(address => uint256) storage,address)",
          "getPendingRewardsSummary(DataStructures.User storage,mapping(address => uint256) storage,mapping(address => uint256) storage,mapping(address => uint256) storage,address)",
          "updateLegVolumes(DataStructures.User storage,uint256,bool)",
          "checkRankQualification(DataStructures.User storage)",
          "unlockAchievement(mapping(address => struct DataStructures.User) storage,address,uint32)",
          "getAchievements(mapping(address => struct DataStructures.User) storage,address)",
          "getTopPerformers(mapping(address => struct DataStructures.User) storage,uint8,uint32)",
          "getRankDistribution(mapping(address => struct DataStructures.User) storage,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/BonusDistributionLib.sol:BonusDistributionLib": {
        "src": "contracts/libraries/BonusDistributionLib.sol:11",
        "version": {
          "withMetadata": "a19b8f77bebfeb469c58368cc89f32758669e9d5cdf2e06d24e35003cf87b367",
          "withoutMetadata": "92a763ee0a41ac8962ddd7f237ef3ac05488abf2288df4053af5f273c32dc3b3",
          "linkedWithoutMetadata": "92a763ee0a41ac8962ddd7f237ef3ac05488abf2288df4053af5f273c32dc3b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "distribute10LevelBonus(mapping(address => struct DataStructures.User) storage,address,uint96)",
          "distributeUplineBonus(mapping(address => struct DataStructures.User) storage,address,uint96)",
          "addEarningsWithCap(mapping(address => struct DataStructures.User) storage,address,uint96,uint8)",
          "distributeReinvestment(mapping(address => struct DataStructures.User) storage,uint96,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/BusinessLogic.sol:BusinessLogic": {
        "src": "contracts/libraries/BusinessLogic.sol:10",
        "version": {
          "withMetadata": "818f9297270eecee99a52e9db39ba42fd8a38f3a1d9b918f45ec3641420d2caa",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/CommissionLib.sol:CommissionLib": {
        "src": "contracts/libraries/CommissionLib.sol:10",
        "version": {
          "withMetadata": "2667fe89f6439570bb4dbc5ef9caf131b3caf6c83dd772ba43d05d830ccece1c",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/DataStructures.sol:DataStructures"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/ConstantsLib.sol:ConstantsLib": {
        "src": "contracts/libraries/ConstantsLib.sol:8",
        "version": {
          "withMetadata": "5c43dc474fe07c8ec1f577a348bd64fe81d175fc2c3f1d1d9f6b18e89f861699",
          "withoutMetadata": "2d262ce11f51b7ed9e48414f443097822bdeac76a71629ce9c2502bc9b150172",
          "linkedWithoutMetadata": "2d262ce11f51b7ed9e48414f443097822bdeac76a71629ce9c2502bc9b150172"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBasisPoints()",
          "getAdminFeeRate()",
          "getEarningsMultiplier()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/CoreOperationsLib.sol:CoreOperationsLib": {
        "src": "contracts/libraries/CoreOperationsLib.sol:11",
        "version": {
          "withMetadata": "ab2da242c82e3fc0a112a6733fc326bb4da173c73bdcd7e99c1e86998e2268f5",
          "withoutMetadata": "85cd0cc7a7a3a532be12ebd54be4b445265a28c60caad03602ad68fbde9f6f4e",
          "linkedWithoutMetadata": "85cd0cc7a7a3a532be12ebd54be4b445265a28c60caad03602ad68fbde9f6f4e"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/DataStructures.sol:DataStructures"
        ],
        "methods": [
          "processRegistration(address,address,uint8,uint96,uint32)",
          "addEarnings(DataStructures.User storage,uint96,uint8)",
          "processWithdrawal(DataStructures.User storage,uint96,uint8,address,address)",
          "calculateBonusDistributions(uint96,uint16,uint16,uint16,uint16,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/CoreOptimized.sol:CoreOptimized": {
        "src": "contracts/libraries/CoreOptimized.sol:11",
        "version": {
          "withMetadata": "09a586dfeb2db6f77b7af2d2f74d84d5b4a3d466c7b74119cf5b3c7b124973c6",
          "withoutMetadata": "a8ac0cb896e223eceb0096c5604cda68527cf447511e4546d10917a916ed6106",
          "linkedWithoutMetadata": "a8ac0cb896e223eceb0096c5604cda68527cf447511e4546d10917a916ed6106"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/DataStructures.sol:DataStructures": {
        "src": "contracts/libraries/DataStructures.sol:41",
        "version": {
          "withMetadata": "b274d89ba665fe77aabbc40b8a441712227b20d402cec648bc52db47bf748d58",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/Errors.sol:Errors": {
        "src": "contracts/libraries/Errors.sol:9",
        "version": {
          "withMetadata": "0370482ea11a2b8d798156c1aa88c4ea0abdf649141052d66dee66f2d4aacedf",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/LeadFiveCore.sol:LeadFiveCore": {
        "src": "contracts/libraries/LeadFiveCore.sol:12",
        "version": {
          "withMetadata": "024fe2010a51cd57d0b0a7fecdb4231e73cb3bc2817568cbcc66dd7fc1c6ef21",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/LeaderPoolLib.sol:LeaderPoolLib": {
        "src": "contracts/libraries/LeaderPoolLib.sol:13",
        "version": {
          "withMetadata": "3effa9e990be22ffb2ced812b4d5796ab809cf7eaf86f842384c267e05ab47bb",
          "withoutMetadata": "959cd942deb90cbb7dca04ed41020864c745e13b167a1deb23c8b8ab546d1d0e",
          "linkedWithoutMetadata": "959cd942deb90cbb7dca04ed41020864c745e13b167a1deb23c8b8ab546d1d0e"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/BonusDistributionLib.sol:BonusDistributionLib"
        ],
        "methods": [
          "updateLeaderQualifications(mapping(address => struct DataStructures.User) storage,address,address[] storage)",
          "distributeLeaderPoolRewards(mapping(address => struct DataStructures.User) storage,address[] storage,uint96)",
          "distributeHelpPoolRewards(mapping(address => struct DataStructures.User) storage,address[] storage,uint96)",
          "distributeClubPoolRewards(mapping(address => struct DataStructures.User) storage,address[] storage,uint96)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 600,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          },
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 876,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          },
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 1307,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          },
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 2142,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "BonusDistributionLib",
            "src": "contracts/libraries/BonusDistributionLib.sol"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/MatrixManagementLib.sol:MatrixManagementLib": {
        "src": "contracts/libraries/MatrixManagementLib.sol:12",
        "version": {
          "withMetadata": "a1013b89bd1aa792d5a9964be90004fb26b86343795b1c72bfb4e2ba5cd95254",
          "withoutMetadata": "f39192ea946e246f39237b3d884df2f521b9081ca5d48f121e9713487e761b8e",
          "linkedWithoutMetadata": "f39192ea946e246f39237b3d884df2f521b9081ca5d48f121e9713487e761b8e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializePosition(MatrixManagementLib.MatrixPosition storage,address,uint8)",
          "addDownline(MatrixManagementLib.MatrixPosition storage,address)",
          "updateEarnings(MatrixManagementLib.MatrixPosition storage,uint256)",
          "setPositionActive(MatrixManagementLib.MatrixPosition storage,bool)",
          "getPositionInfo(MatrixManagementLib.MatrixPosition storage)",
          "getDownlines(MatrixManagementLib.MatrixPosition storage)",
          "findOptimalUpline(mapping(address => struct MatrixManagementLib.MatrixPosition) storage,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/MatrixRewardsLib.sol:MatrixRewardsLib": {
        "src": "contracts/libraries/MatrixRewardsLib.sol:13",
        "version": {
          "withMetadata": "8713a0f98e9c0bb98a940ab2f17cc090abdcc0a8dbac8f79d9a78620f927d01c",
          "withoutMetadata": "510b0e0bbfafe263748febe2b59dc8539b8f9ba69d81250164a502e969a9299f",
          "linkedWithoutMetadata": "510b0e0bbfafe263748febe2b59dc8539b8f9ba69d81250164a502e969a9299f"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/BonusDistributionLib.sol:BonusDistributionLib"
        ],
        "methods": [
          "checkMatrixTierRewards(mapping(address => struct DataStructures.User) storage,address)",
          "advanceUserMatrix(mapping(address => struct DataStructures.User) storage,address,uint8)",
          "getMatrixRewards(mapping(address => struct DataStructures.User) storage,address,mapping(address => struct MatrixManagementLib.MatrixPosition) storage)",
          "calculateAndClaimMatrixRewards(mapping(address => struct DataStructures.User) storage,address,mapping(address => struct MatrixManagementLib.MatrixPosition) storage)",
          "triggerMatrixCycle(mapping(address => struct DataStructures.User) storage,address,mapping(address => struct MatrixManagementLib.MatrixPosition) storage)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 959,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          },
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 1351,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          },
          {
            "src": "contracts/libraries/BonusDistributionLib.sol",
            "name": "BonusDistributionLib",
            "length": 20,
            "start": 1920,
            "placeholder": "__$ee93c7068d5cbd12b0e0fbf9bc718b7978$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "BonusDistributionLib",
            "src": "contracts/libraries/BonusDistributionLib.sol"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/NetworkAnalytics.sol:NetworkAnalytics": {
        "src": "contracts/libraries/NetworkAnalytics.sol:10",
        "version": {
          "withMetadata": "67b9e0f5c5cedf34e4265f65699d899ea66589afed246e76dc115723e8a614fe",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/OperationsLib.sol:OperationsLib": {
        "src": "contracts/libraries/OperationsLib.sol:6",
        "version": {
          "withMetadata": "10cec36d2529f13442c692163a71dec792378e2a4367c9d6986f4b063b5d647f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/DataStructures.sol:DataStructures"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/OracleManagementLib.sol:IPriceFeed": {
        "src": "contracts/libraries/OracleManagementLib.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/OracleManagementLib.sol:OracleManagementLib": {
        "src": "contracts/libraries/OracleManagementLib.sol:12",
        "version": {
          "withMetadata": "e252ae449614c91a8d97253e5ac39fe655a9dd95b2e856af5973af5002173d35",
          "withoutMetadata": "fe0449f5e79e8d3169c7032f87d7e30fa72db1b62d951ccb06978cbe2001b74b",
          "linkedWithoutMetadata": "fe0449f5e79e8d3169c7032f87d7e30fa72db1b62d951ccb06978cbe2001b74b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSecurePrice(contract IPriceFeed[] storage)",
          "calculateBNBRequired(uint96,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/PoolDistributionLib.sol:PoolDistributionLib": {
        "src": "contracts/libraries/PoolDistributionLib.sol:11",
        "version": {
          "withMetadata": "e3cc59dedc467f37e678bc60da1b6dd26a2379e749ec580ee920edd7d246bc9d",
          "withoutMetadata": "590fd298815b00cb408256ac255194c6d24099c4273757979bab597cece95bc8",
          "linkedWithoutMetadata": "590fd298815b00cb408256ac255194c6d24099c4273757979bab597cece95bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializeSchedule(PoolDistributionLib.DistributionSchedule storage,uint32,uint96)",
          "isDistributionDue(PoolDistributionLib.DistributionSchedule storage)",
          "updateNextDistribution(PoolDistributionLib.DistributionSchedule storage)",
          "setScheduleActive(PoolDistributionLib.DistributionSchedule storage,bool)",
          "getDistributionInfo(PoolDistributionLib.DistributionSchedule storage)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/ReferralLib.sol:ReferralLib": {
        "src": "contracts/libraries/ReferralLib.sol:6",
        "version": {
          "withMetadata": "cbf33ffcb4534d10335487eeeb0f6080d413241028bd5286d9b306c0b7e5058f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/SecureOracle.sol:IPriceFeed": {
        "src": "contracts/libraries/SecureOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/SecureOracle.sol:SecureOracle": {
        "src": "contracts/libraries/SecureOracle.sol:21",
        "version": {
          "withMetadata": "600c8e1d1cbdfbdd27b4f8f4d68e1276e189dabec118af0725902fb44bcb9330",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/SecureOracleManager.sol:IPriceFeed": {
        "src": "contracts/libraries/SecureOracleManager.sol:141",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/SecureOracleManager.sol:SecureOracleManager": {
        "src": "contracts/libraries/SecureOracleManager.sol:12",
        "version": {
          "withMetadata": "1d42f1944ff27f64fc8de0a1fbb30e187877601a906a72a800d2b8d43fa79a81",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/Errors.sol:Errors",
          "contracts/libraries/LeadFiveCore.sol:LeadFiveCore"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/UserManagementLib.sol:UserManagementLib": {
        "src": "contracts/libraries/UserManagementLib.sol:7",
        "version": {
          "withMetadata": "d9fbd56606c7c7af6415bc6f43325f655a20d3b64eb29419c1f8b4861021a9a4",
          "withoutMetadata": "0da0b0cf4a263853b1ffe04318f0e8449d9e11169bac3ea151cf298389d16d18",
          "linkedWithoutMetadata": "0da0b0cf4a263853b1ffe04318f0e8449d9e11169bac3ea151cf298389d16d18"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/DataStructures.sol:DataStructures"
        ],
        "methods": [
          "getGenealogyTree(mapping(address => struct DataStructures.User) storage,address,uint8,mapping(address => address[]) storage)",
          "getReferralStats(mapping(address => struct DataStructures.User) storage,address,mapping(address => address[]) storage)",
          "getNetworkStats(mapping(address => struct DataStructures.User) storage,uint32)",
          "processNetworkCompression(mapping(address => struct DataStructures.User) storage,mapping(address => address[]) storage)",
          "flushUser(mapping(address => struct DataStructures.User) storage,address,mapping(address => address[]) storage)",
          "reassignOrphan(mapping(address => struct DataStructures.User) storage,address,address,mapping(address => address[]) storage)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/ViewFunctionsLib.sol:ViewFunctionsLib": {
        "src": "contracts/libraries/ViewFunctionsLib.sol:12",
        "version": {
          "withMetadata": "0a60c0008b3928a00cb579e82a765c3eedd85bd6ab09d1cf4b370b8374668e70",
          "withoutMetadata": "d6eea837bea59830a2d1f87e4740f7c1720bfeaf35674730e3d62ce5564e9022",
          "linkedWithoutMetadata": "d6eea837bea59830a2d1f87e4740f7c1720bfeaf35674730e3d62ce5564e9022"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLeaderStats(mapping(address => struct DataStructures.User) storage,address[] storage,PoolDistributionLib.DistributionSchedule storage,PoolDistributionLib.DistributionSchedule storage)",
          "getUserLeaderInfo(mapping(address => struct DataStructures.User) storage,address)",
          "getUserAnalytics(mapping(address => struct DataStructures.User) storage,address)",
          "getUserDetails(mapping(address => struct DataStructures.User) storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    }
  ]
}